# Title: UML

Date: 2015-01-27 10:29
Tags: []
categories: []

---
## Overview

* UML 2.0以降では13種類のダイアグラム。
* 大きく構造図と振る舞い図に分かれる。

## Diagram list

主要なもののみ記載する。

### 構造図

* クラス図         : システムを構成するクラス(概念)とそれらの間に存在する関連の構造を表現する。
* パッケージ図     : パッケージ同士の依存関係を描画することで論理的なグルーピングをするための図で、クラス図の一部である。
* オブジェクト図   : クラスを実体化して生成されたオブジェクト同士の関係を表現する。
* コンポーネント図 : 物理的な構成要素(ファイル、ヘッダ、ライブラリなど)からシステムの構造を表現する。
	-> UML 2.0で定義が変わっていそう。
	> UML 2.0では、1つ以上のインターフェイスを持つシステムやサブシステム内の自立したカプセル単位のものをコンポーネントとしている。UML 2.0仕様には厳格な規定はないものの、一般的に「代替可能な」モジュールでインプリメントされるものを示す設計上のより大きな単位がコンポーネントだとされる。しかし現在では、UML 1.xと異なり、コンポーネントはあくまでも論理的な設計段階の構成体になった。つまり、コンポーネントが動作をカプセル化し、指定されたインターフェイスをインプリメントするため、設計上のコンポーネントのインプリメンテーションを再利用したり、別のもので代用することが容易になったのである

### 振る舞い図

* アクティビティ図               : システムなどのフローを記述する表記法、フローチャートの一種。UMLでは表記するフローは特定されておらず、ユーザ側に近い業務のフローや、実装に近い関数のフローを示すことができる。
* ユースケース図                 : システムに要求される機能を、ユーザの視点から示したもの。ユースケース図を有効に活用することにより、システムの全体像を開発者とユーザが一緒に評価しやすくなる。これにより完成後のシステムがユーザの要望に合わないという問題を軽減できる。
* ステートチャート図(状態遷移図) : 1つのオブジェクトの状態（ステート）に着目し、その変化を表現したもの。
* シーケンス図                   : オブジェクト間のメッセージの流れを時系列に表す。図の中に時間の流れが存在するため、イベントの発生順序やオブジェクト間の生存時間を記述することができる。

## シーケンス図

イベントの発生順序、オブジェクトの生存期間(ライフライン)、メッセージといった要素によって、多様な粒度に応じたシステム分析、設計を行うことができる。

* 同期メッセージ   : 先端黒矢印
* 非同期メッセージ : 先端細矢印
* 応答メッセージ   : 点線矢印

メッセージは原則左から右に描く。(ただし複雑なケースではその限りではない)

### References

* <http://www.itsenka.com/contents/development/uml/sequence.html>

## クラス図

* 集約とコンポジションの違い
	* 集約           : 全体と部分(車<-ハンドル、タイヤ)
	* コンポジション : 強い集約関係(e.g. デスクトップPCとキーボードは集約関係。ノートPCとキーボードはコンポジション)

* 依存
	> UML における依存関係は、 ある要素 (クライアント) が他の要素 (サプライヤー) を使用する関係、 またはこれに依存する関係のことをいいます。

* 誘導可能性
	単純にメッセージを送れる方向なだけ

* 関連と依存の違い
	<http://capsctrl.que.jp/kdmsnr/wiki/bliki/?DependencyAndAssociation>
	> 依存はフィールドに持たないような関連性の低い関連(?)\*3を表すときに用います。
	> パラメータの型を命名したり一時変数内にオブジェクトを作ったりすることは、「依存」を意味する。

